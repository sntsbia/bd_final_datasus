# -*- coding: utf-8 -*-
"""csv_to_sql.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Tcycae_zaoMZCL8j2SgN-xG1feA8XSWP
"""

import pandas as pd

arquivo_dataset = "drive/MyDrive/data.csv"
arquivo_saida = "arquivo_saida"

df = pd.read_csv(arquivo_dataset)

# relaciona o nome das colunas com o seu indice no dataset
colunas = {
    "dataNotificacao": 1, 
    "dataInicioSintomas": 2,
    "sintomas": 3,
    "profissionalSaude": 4,
    "outrosSintomas": 5,
    "outrasCondicoes": 6,
    "condicoes": 7,
    "sexo": 8,
    "idade": 9,
    "estado": 10,
    "estadoIBGE": 11,
    "municipio": 12,
    "municipioIBGE": 13,
    "estadoNotificacao": 14,
    "municipioNotificacao": 15,
    "dataEncerramento": 16,
    "evolucaoCaso": 17,
    "classificacaoFinal": 18,
    "codigoRecebeuVacina": 19,
    "codigoDosesVacina": 20,
    "dataPrimeiraDose": 21,
    "dataSegundaDose": 22,
    "codigoLaboratorioPrimeiraDose": 23,
    "codigoLaboratorioSegundaDose": 24,
    "lotePrimeiraDose": 25,
    "loteSegundaDose": 26,
    "totalTestesRealizados": 27,
    "dataColetaTeste1": 28,
    "dataColetaTeste2" : 29,
    "codigoResultadoTeste1": 30,
    "codigoResultadoTeste2" : 31
}

# relaciona estados com codigo ibge
estados = {"Rio de Janeiro" : 33,
           "Acre" : 12,
           "Alagoas" : 27,
           "Paraíba" : 25,
           "São Paulo" : 35,
           "Amazonas" : 13,
           "Ceará" : 23,
           "Minas Gerais" : 31,
           "Bahia" : 29,
           "Espírito Santo" : 32
           }

# relaciona municipios com o id do estado
municipios = {"Rio de Janeiro" : 1,
              "Niterói" : 1,
              "Cruzeiro do Sul" : 2,
              "Rio Branco" : 2,
              "Viçosa" : 3,
              "Maceió" : 3,
              "Serra Redonda" : 4,
              "Itaporanga" : 4,
              "Guarulhos" : 5,
              "Osasco" : 5,
              "Manaus" : 6,
              "Alvarães" : 6,
              "Fortaleza" : 7,
              "Camocim" : 7,
              "Belo Horizonte" : 8,
              "Três Marias" : 8,
              "Salvador" : 9,
              "Alagoinhas" : 9,
              "Vitória" : 10,
              "Santa Teresa" : 10
              }

# relaciona vacinas (nome/fabricante) ao seu id 
vacinas = {"SINOVAC" : 1, 
           "SINOVAC/BUTANTAN" : 2, 
           "PFIZER" : 3, 
           "ASTRAZENECA" : 4,
           "ASTRAZENECA/FIOCRUZ" : 5,
           "JANSSEN" : 6
           }

# relaciona sintomas ao seu id 
sintomas = {"Assintomático" : 1,
            "Dor de Cabeça" : 2,
            "Febre" : 3,
            "Distúrbios gustativos" : 4,
            "Dor de Garganta" : 5,
            "Distúrbios olfativos" : 6,
            "Dispneia" : 7,
            "Tosse" : 8,
            "Coriza" : 9,
            "Outros" : 10
            }

# relaciona condicao ao seu id
condicoes = { "Doenças respiratórias crônicas descompensadas" : 1,
              "Doenças renais crônicas em estágio avançado (graus 3, 4 ou 5)" : 2,
              "Portador de doenças cromossômicas ou estado de fragilidade imunológica" : 3,
              "Doenças cardíacas crônicas" : 4,
              "Diabetes" : 5,
              "Imunossupressão" : 6,
              "Gestante Puérpera (até 45 dias do parto)" : 7,
              "Obesidade" : 8
            }

def get_pos(elemento, lista):
  i = 0
  for e in lista:
    i += 1
    if e == elemento:
      return i
  return 0

def in_list(elemento, lista):
    return get_pos(elemento, lista) > 0

def campo_vazio(campo):
  if str(campo) == "nan":
    return True
  return False

"""
CREATE TABLE Pessoa (
  id_Pessoa int PRIMARY KEY,
  sexo varchar(1),
  idade int
); 
"""
class Pessoa:
  pessoa_id = 0
  def __init__(self, sexo, idade):
    self.sexo = sexo
    self.idade = idade
    Pessoa.pessoa_id += 1
    self.id = Pessoa.pessoa_id
  def to_sql(self):
    return "INSERT INTO Pessoa VALUES (" + str(self.id) + ", '" + self.sexo + "', "\
       + str(self.idade) + ");\n"
  def to_string(self):
    return "(" + str(self.id) + ", '" + self.sexo + "', "\
       + str(self.idade) + ")"


"""
CREATE TABLE Sintomas (
  id_Sintomas int NOT NULL PRIMARY KEY,
  sintomas varchar(256),
  fk_id_Teste int
);
"""
class Sintomas:
  sintoma_id = 0
  def __init__(self, sintoma, teste_id):
    self.sintoma = sintoma
    self.teste = teste_id
    Sintomas.sintoma_id += 1
    self.id = Sintomas.sintoma_id
  def to_sql(self):
    return "INSERT INTO Sintomas VALUES (" + str(self.id) + ", '"\
       + self.sintoma + "', " + str(self.teste) + ");\n"
  def to_string(self):
    return "(" + str(self.id) + ", '"\
       + self.sintoma + "', " + str(self.teste) + ")"

"""
CREATE TABLE Condicao (
  id_Condicao int PRIMARY KEY,
  condicao varchar(256),
  fk_id_Pessoa
);
"""
class Condicao:
  condicao_id = 0
  def __init__(self, condicao, pessoa_id):
    self.condicao = condicao
    self.pessoa = pessoa_id
    Condicao.condicao_id += 1
    self.id = Condicao.condicao_id
  def to_sql(self):
    return "INSERT INTO Condicao VALUES (" + str(self.id) + ", '"\
       + self.condicao + "'" + str(self.pessoa) + ");\n"
  def to_string(self):
    return "(" + str(self.id) + ", '" \
       + self.condicao + "', " + str(self.pessoa) + ")"


"""
CREATE TABLE Teste (
  id_Teste int PRIMARY KEY,
  data_Teste DATE,
  resultado int,
  fk_id_Pessoa int
);
"""
class Teste:
  teste_id = 0
  def __init__(self, data, resultado, pessoa_id):
    self.data = data
    self.resultado = resultado
    self.pessoa = pessoa_id
    Teste.teste_id += 1
    self.id = Teste.teste_id
  def to_sql(self):
    return "INSERT INTO Teste VALUES (" + str(self.id) + ", '" + self.data + "', "\
      + str(self.resultado) + ", " + str(self.pessoa) + ");\n"
  def to_string(self):
    return "(" + str(self.id) + ", '" + self.data + "', "\
      + str(self.resultado) + ", " + str(self.pessoa) + ")"

"""
CREATE TABLE Uf (
  id_Uf int NOT NULL PRIMARY KEY,
  codigo_ibge int,
  estado varchar(256),
  bandeira BLOB
);
"""
class Uf:
  uf_id = 0
  def __init__(self, cod_ibge, estado):
    self.cod_ibge = cod_ibge
    self.estado = estado
    self.bandeira = "NULL"
    Uf.uf_id += 1
    self.id = Uf.uf_id
  def to_sql(self):
    return "INSERT INTO Uf VALUES (" + str(self.id) + ", " + str(self.cod_ibge) + ", '"\
       +  str(self.estado) + "', " + self.bandeira + ");\n"
  def to_string(self):
    return "(" + str(self.id) + ", " + str(self.cod_ibge) + ", '"\
       +  str(self.estado) + "', " + self.bandeira + ")"

"""
CREATE TABLE Vacina (
  id_Vacina int PRIMARY KEY,
  fabricante varchar(256),
  nome_Vacina varchar(256)
);
"""
class Vacina:
  vacina_id = 0
  def __init__(self, nome_fabricante):
    # divide nome e fabricante separados por '/'
    nf = nome_fabricante.split("/")
    self.nome = nf[0]
    if len(nf) == 2:
      self.fabricante = nf[1]
      self.tem_fabricante = True
    else:
      self.fabricante = "NULL"
      self.tem_fabricante = False
    Vacina.vacina_id += 1
    self.id = Vacina.vacina_id

  def to_sql(self):
    if self.tem_fabricante:
      return "INSERT INTO Vacina VALUES (" + str(self.id) + ", '"\
        + self.fabricante + "'" + ", '" + self.nome + "'" +");\n"
    else:
      return "INSERT INTO Vacina VALUES (" + str(self.id) + ", NULL"\
          + ", '" + self.nome + "'" +");\n"
  def to_string(self):
    if self.tem_fabricante:
      return "(" + str(self.id) + ", '"\
        + self.fabricante + "'" + ", '" + self.nome + "'" +")"
    else:
        return "(" + str(self.id) + ", NULL"\
          + ", '" + self.nome + "'" +")"
"""
CREATE TABLE Municipio (
  id_Municipio int PRIMARY KEY,
  municipio varchar(256),
  fk_id_Uf int
);
"""
class Municipio:
  municipio_id = 0
  def __init__(self, municipio, uf):
    self.municipio = municipio
    Municipio.municipio_id += 1
    self.id = Municipio.municipio_id
    self.uf = uf
  def to_sql(self):
    return "INSERT INTO Municipio VALUES (" + str(self.id) + ", '"\
       + self.municipio + "', " + str(self.uf) + ");\n"
  def to_string(self):
    return "(" + str(self.id) + ", '"\
      + self.municipio + "', " + str(self.uf) + ")"

"""
CREATE TABLE Mora (
  fk_id_Pessoa int,
  fk_id_Municipio int
);
"""
class Mora:
  def __init__(self, pessoa_id, municipio_id):
    self.pessoa = pessoa_id
    self.municipio = municipio_id
  def to_sql(self):
    return "INSERT INTO Mora VALUES (" + str(self.pessoa) + ", "\
       + str(self.municipio) + ");\n"
  def to_string(self):
    return "(" + str(self.pessoa) + ", "\
       + str(self.municipio) + ")"

"""
CREATE TABLE Ocorre (
  fK_id_Teste int,
  fk_id_Municipio int
);
"""
class Ocorre:
  def __init__(self, teste_id, municipio_id):
    self.teste = teste_id
    self.municipio = municipio_id
  def to_sql(self):
    return "INSERT INTO Ocorre VALUES (" + str(self.teste) + ", "\
       + str(self.municipio) + ");\n"
  def to_string(self):
    return "(" + str(self.teste) + ", "\
       + str(self.municipio) + ")"

"""
CREATE TABLE Toma (
  fk_id_Vacina int,
  fk_id_Pessoa int,
  data DATE,
  lote varchar(256),
  dose int
);
"""
class Toma:
  def __init__(self, vacina_id, pessoa_id, data, lote, dose):
    # divide nome e fabricante separados por '/'
    self.vacina = vacina_id
    self.pessoa = pessoa_id
    self.data = data
    self.lote = lote
    self.dose = dose

  def to_sql(self):
    return "INSERT INTO Toma VALUES (" + str(self.vacina) + ", " + str(self.pessoa) +  ", '"\
       + self.data + "', '" + str(self.lote) + "', " + str(self.dose) + ") ;\n"
  def to_string(self):
    return "(" + str(self.vacina) + ", " + str(self.pessoa) +  ", '"\
       + self.data + "', '" + str(self.lote) + "', " + str(self.dose) + ")"


# a partir de um prefixo "INSERT INTO Table VALUES " gera sql para inserir multiplas
# tuplas modeladas em tuples
def gera_insert_sql(prefix, tuples):
  # insere as tuplas separadas por virgula apos o prefixo terminando com ;
  return prefix + ", ".join(tuples) + ";\n"

sql_code = ""

tuplas_estados = []
# gera sql pra inserir os estados
for est, ibge in estados.items():
  estado = Uf(ibge, est)
  tuplas_estados += [estado.to_string()]

sql_code += gera_insert_sql("INSERT INTO Uf VALUES ", tuplas_estados)

tuplas_vacinas = []
# gera sql pra inserir as vacinas
for vac, id in vacinas.items():
  vacina = Vacina(vac)
  tuplas_vacinas += [vacina.to_string()]

sql_code += gera_insert_sql("INSERT INTO Vacina VALUES ", tuplas_vacinas)


tuplas_municipios = []
# gera sql pra inserir os municipios
for mun, uf in municipios.items():
  municipio = Municipio(mun, uf)
  tuplas_municipios += [municipio.to_string()]

sql_code += gera_insert_sql("INSERT INTO Municipio VALUES ", tuplas_municipios)

# listas que guardam as tuplas de cada tabela gerada
tuplas_condicao = []
tuplas_sintomas = []
tuplas_teste = []
tuplas_pessoa = []
tuplas_mora = []
tuplas_ocorre = []
tuplas_toma = []

# itera as linas do dataset
for indice, row in df.iterrows():
  # filtra os municipios
  if (in_list(row["municipio"], municipios) and
      in_list(row["municipioNotificacao"], municipios) and
      not campo_vazio(row["sexo"])):

    pessoa = Pessoa(row["sexo"][0], row["idade"])
    tuplas_pessoa += [pessoa.to_string()]

    municipio_mora = get_pos(row["municipio"], municipios)
    municipio_teste = get_pos(row["municipioNotificacao"], municipios)
    mora = Mora(Pessoa.pessoa_id, municipio_mora)
    tuplas_mora += [mora.to_string()]

    c = row["condicoes"]
    if not campo_vazio(c):
      condicao_lista = c.split(", ");
      for cl in condicao_lista:
        cond_id = get_pos(cl, condicoes)
        if cond_id > 0:
          condicao = Condicao(cl, Pessoa.pessoa_id)
          tuplas_condicao += [condicao.to_string()]

    num_testes = int(row["totalTestesRealizados"])
    testes = []
    data = row["dataColetaTeste1"]

    if not campo_vazio(data):
      resultado = row["codigoResultadoTeste1"]
      if campo_vazio(resultado):
        resultado = 9
      else:
        resultado = int(resultado)
      teste = Teste(data, resultado, Pessoa.pessoa_id)
      testes += [teste]
      tuplas_teste += [teste.to_string()]

      s = row["sintomas"]
      if not campo_vazio(s):
        sintoma_lista = s.split(", ");
        # popula a relacao teste_sintoma
        for sl in sintoma_lista:
          sint_id = get_pos(sl, sintomas)
          if sint_id > 0:
            sintoma = Sintomas(sl, Teste.teste_id)
            tuplas_sintomas += [sintoma.to_string()]
    
    
    data = row["dataColetaTeste2"]
    if not campo_vazio(data): 
      resultado = row["codigoResultadoTeste2"]
      if campo_vazio(resultado):
        resultado = 9
      else:
        resultado = int(resultado)
      teste = Teste(data, resultado, Pessoa.pessoa_id)
      testes += [teste]
      tuplas_teste += [teste.to_string()]
    
    
    ocorres = []
    for t in testes:
      ocorre = Ocorre(t.id, municipio_teste)
      tuplas_ocorre += [ocorre.to_string()]
    
    data = row["dataPrimeiraDose"]
    if not (campo_vazio(data)) and in_list(row["codigoLaboratorioPrimeiraDose"], vacinas):
      lote = row["dataPrimeiraDose"]
      vacina_id = vacinas[row["codigoLaboratorioPrimeiraDose"]]
      dose = 1
      toma = Toma(vacina_id, Pessoa.pessoa_id, data, lote, dose)
      tuplas_toma += [toma.to_string()]

    data = row["dataSegundaDose"]
    if not (campo_vazio(data)) and in_list(row["codigoLaboratorioSegundaDose"], vacinas) :
      lote = row["loteSegundaDose"]
      vacina_id = vacinas[row["codigoLaboratorioSegundaDose"]]
      dose = 2
      toma = Toma(vacina_id, Pessoa.pessoa_id, data, lote, dose)
      tuplas_toma += [toma.to_string()]


# gera sql

sql_code += gera_insert_sql("INSERT INTO Pessoa VALUES ", tuplas_pessoa)
sql_code += gera_insert_sql("INSERT INTO Condicao VALUES ", tuplas_condicao)
sql_code += gera_insert_sql("INSERT INTO Mora VALUES ", tuplas_mora)
sql_code += gera_insert_sql("INSERT INTO Teste VALUES ", tuplas_teste)
sql_code += gera_insert_sql("INSERT INTO Sintomas VALUES ", tuplas_sintomas)
sql_code += gera_insert_sql("INSERT INTO Ocorre VALUES ", tuplas_ocorre)
sql_code += gera_insert_sql("INSERT INTO Toma VALUES ", tuplas_toma)

insert_file = open(arquivo_saida, "w")
insert_file.write(sql_code)
insert_file.close()